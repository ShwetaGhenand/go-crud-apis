// Code generated by sqlc. DO NOT EDIT.
// source: queries.sql

package dbgen

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (
  id, name, password, email, phone, age, address
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
)
`

type CreateUserParams struct {
	ID       int32          `json:"id"`
	Name     string         `json:"name"`
	Password string         `json:"password"`
	Email    string         `json:"email"`
	Phone    sql.NullString `json:"phone"`
	Age      sql.NullInt32  `json:"age"`
	Address  sql.NullString `json:"address"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.ID,
		arg.Name,
		arg.Password,
		arg.Email,
		arg.Phone,
		arg.Age,
		arg.Address,
	)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, name, password, email, phone, age, address FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Password,
		&i.Email,
		&i.Phone,
		&i.Age,
		&i.Address,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, name, password, email, phone, age, address FROM users
ORDER BY name
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Password,
			&i.Email,
			&i.Phone,
			&i.Age,
			&i.Address,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users SET
    name = $1,
	email = $2,
	phone = $3,
	age = $4,
	address = $5
	WHERE id = $6
`

type UpdateUserParams struct {
	Name    string         `json:"name"`
	Email   string         `json:"email"`
	Phone   sql.NullString `json:"phone"`
	Age     sql.NullInt32  `json:"age"`
	Address sql.NullString `json:"address"`
	ID      int32          `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.Name,
		arg.Email,
		arg.Phone,
		arg.Age,
		arg.Address,
		arg.ID,
	)
	return err
}

const userExists = `-- name: UserExists :one
SELECT id, name, password, email, phone, age, address FROM users
WHERE name = $1 and password = $2
`

type UserExistsParams struct {
	Name     string `json:"name"`
	Password string `json:"password"`
}

func (q *Queries) UserExists(ctx context.Context, arg UserExistsParams) (User, error) {
	row := q.db.QueryRowContext(ctx, userExists, arg.Name, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Password,
		&i.Email,
		&i.Phone,
		&i.Age,
		&i.Address,
	)
	return i, err
}
